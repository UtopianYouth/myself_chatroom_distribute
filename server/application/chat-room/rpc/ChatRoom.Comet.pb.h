// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ChatRoom.Comet.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ChatRoom_2eComet_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ChatRoom_2eComet_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
#include "ChatRoom.Protocol.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ChatRoom_2eComet_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ChatRoom_2eComet_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[9]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ChatRoom_2eComet_2eproto;
namespace ChatRoom {
namespace Comet {
class BroadcastReply;
struct BroadcastReplyDefaultTypeInternal;
extern BroadcastReplyDefaultTypeInternal _BroadcastReply_default_instance_;
class BroadcastReq;
struct BroadcastReqDefaultTypeInternal;
extern BroadcastReqDefaultTypeInternal _BroadcastReq_default_instance_;
class BroadcastRoomReply;
struct BroadcastRoomReplyDefaultTypeInternal;
extern BroadcastRoomReplyDefaultTypeInternal _BroadcastRoomReply_default_instance_;
class BroadcastRoomReq;
struct BroadcastRoomReqDefaultTypeInternal;
extern BroadcastRoomReqDefaultTypeInternal _BroadcastRoomReq_default_instance_;
class PushMsgReply;
struct PushMsgReplyDefaultTypeInternal;
extern PushMsgReplyDefaultTypeInternal _PushMsgReply_default_instance_;
class PushMsgReq;
struct PushMsgReqDefaultTypeInternal;
extern PushMsgReqDefaultTypeInternal _PushMsgReq_default_instance_;
class RoomsReply;
struct RoomsReplyDefaultTypeInternal;
extern RoomsReplyDefaultTypeInternal _RoomsReply_default_instance_;
class RoomsReply_RoomsEntry_DoNotUse;
struct RoomsReply_RoomsEntry_DoNotUseDefaultTypeInternal;
extern RoomsReply_RoomsEntry_DoNotUseDefaultTypeInternal _RoomsReply_RoomsEntry_DoNotUse_default_instance_;
class RoomsReq;
struct RoomsReqDefaultTypeInternal;
extern RoomsReqDefaultTypeInternal _RoomsReq_default_instance_;
}  // namespace Comet
}  // namespace ChatRoom
PROTOBUF_NAMESPACE_OPEN
template<> ::ChatRoom::Comet::BroadcastReply* Arena::CreateMaybeMessage<::ChatRoom::Comet::BroadcastReply>(Arena*);
template<> ::ChatRoom::Comet::BroadcastReq* Arena::CreateMaybeMessage<::ChatRoom::Comet::BroadcastReq>(Arena*);
template<> ::ChatRoom::Comet::BroadcastRoomReply* Arena::CreateMaybeMessage<::ChatRoom::Comet::BroadcastRoomReply>(Arena*);
template<> ::ChatRoom::Comet::BroadcastRoomReq* Arena::CreateMaybeMessage<::ChatRoom::Comet::BroadcastRoomReq>(Arena*);
template<> ::ChatRoom::Comet::PushMsgReply* Arena::CreateMaybeMessage<::ChatRoom::Comet::PushMsgReply>(Arena*);
template<> ::ChatRoom::Comet::PushMsgReq* Arena::CreateMaybeMessage<::ChatRoom::Comet::PushMsgReq>(Arena*);
template<> ::ChatRoom::Comet::RoomsReply* Arena::CreateMaybeMessage<::ChatRoom::Comet::RoomsReply>(Arena*);
template<> ::ChatRoom::Comet::RoomsReply_RoomsEntry_DoNotUse* Arena::CreateMaybeMessage<::ChatRoom::Comet::RoomsReply_RoomsEntry_DoNotUse>(Arena*);
template<> ::ChatRoom::Comet::RoomsReq* Arena::CreateMaybeMessage<::ChatRoom::Comet::RoomsReq>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace ChatRoom {
namespace Comet {

// ===================================================================

class PushMsgReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ChatRoom.Comet.PushMsgReq) */ {
 public:
  inline PushMsgReq() : PushMsgReq(nullptr) {}
  ~PushMsgReq() override;
  explicit constexpr PushMsgReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PushMsgReq(const PushMsgReq& from);
  PushMsgReq(PushMsgReq&& from) noexcept
    : PushMsgReq() {
    *this = ::std::move(from);
  }

  inline PushMsgReq& operator=(const PushMsgReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline PushMsgReq& operator=(PushMsgReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PushMsgReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const PushMsgReq* internal_default_instance() {
    return reinterpret_cast<const PushMsgReq*>(
               &_PushMsgReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PushMsgReq& a, PushMsgReq& b) {
    a.Swap(&b);
  }
  inline void Swap(PushMsgReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PushMsgReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PushMsgReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PushMsgReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PushMsgReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PushMsgReq& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PushMsgReq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ChatRoom.Comet.PushMsgReq";
  }
  protected:
  explicit PushMsgReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeysFieldNumber = 1,
    kProtoFieldNumber = 2,
    kProtoOpFieldNumber = 3,
  };
  // repeated string keys = 1;
  int keys_size() const;
  private:
  int _internal_keys_size() const;
  public:
  void clear_keys();
  const std::string& keys(int index) const;
  std::string* mutable_keys(int index);
  void set_keys(int index, const std::string& value);
  void set_keys(int index, std::string&& value);
  void set_keys(int index, const char* value);
  void set_keys(int index, const char* value, size_t size);
  std::string* add_keys();
  void add_keys(const std::string& value);
  void add_keys(std::string&& value);
  void add_keys(const char* value);
  void add_keys(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& keys() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_keys();
  private:
  const std::string& _internal_keys(int index) const;
  std::string* _internal_add_keys();
  public:

  // .ChatRoom.Protocol.Proto proto = 2;
  bool has_proto() const;
  private:
  bool _internal_has_proto() const;
  public:
  void clear_proto();
  const ::ChatRoom::Protocol::Proto& proto() const;
  PROTOBUF_NODISCARD ::ChatRoom::Protocol::Proto* release_proto();
  ::ChatRoom::Protocol::Proto* mutable_proto();
  void set_allocated_proto(::ChatRoom::Protocol::Proto* proto);
  private:
  const ::ChatRoom::Protocol::Proto& _internal_proto() const;
  ::ChatRoom::Protocol::Proto* _internal_mutable_proto();
  public:
  void unsafe_arena_set_allocated_proto(
      ::ChatRoom::Protocol::Proto* proto);
  ::ChatRoom::Protocol::Proto* unsafe_arena_release_proto();

  // int32 protoOp = 3;
  void clear_protoop();
  int32_t protoop() const;
  void set_protoop(int32_t value);
  private:
  int32_t _internal_protoop() const;
  void _internal_set_protoop(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ChatRoom.Comet.PushMsgReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> keys_;
  ::ChatRoom::Protocol::Proto* proto_;
  int32_t protoop_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ChatRoom_2eComet_2eproto;
};
// -------------------------------------------------------------------

class PushMsgReply final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:ChatRoom.Comet.PushMsgReply) */ {
 public:
  inline PushMsgReply() : PushMsgReply(nullptr) {}
  explicit constexpr PushMsgReply(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PushMsgReply(const PushMsgReply& from);
  PushMsgReply(PushMsgReply&& from) noexcept
    : PushMsgReply() {
    *this = ::std::move(from);
  }

  inline PushMsgReply& operator=(const PushMsgReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline PushMsgReply& operator=(PushMsgReply&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PushMsgReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const PushMsgReply* internal_default_instance() {
    return reinterpret_cast<const PushMsgReply*>(
               &_PushMsgReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(PushMsgReply& a, PushMsgReply& b) {
    a.Swap(&b);
  }
  inline void Swap(PushMsgReply* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PushMsgReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PushMsgReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PushMsgReply>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const PushMsgReply& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const PushMsgReply& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ChatRoom.Comet.PushMsgReply";
  }
  protected:
  explicit PushMsgReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:ChatRoom.Comet.PushMsgReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ChatRoom_2eComet_2eproto;
};
// -------------------------------------------------------------------

class BroadcastReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ChatRoom.Comet.BroadcastReq) */ {
 public:
  inline BroadcastReq() : BroadcastReq(nullptr) {}
  ~BroadcastReq() override;
  explicit constexpr BroadcastReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BroadcastReq(const BroadcastReq& from);
  BroadcastReq(BroadcastReq&& from) noexcept
    : BroadcastReq() {
    *this = ::std::move(from);
  }

  inline BroadcastReq& operator=(const BroadcastReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline BroadcastReq& operator=(BroadcastReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BroadcastReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const BroadcastReq* internal_default_instance() {
    return reinterpret_cast<const BroadcastReq*>(
               &_BroadcastReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(BroadcastReq& a, BroadcastReq& b) {
    a.Swap(&b);
  }
  inline void Swap(BroadcastReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BroadcastReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BroadcastReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BroadcastReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BroadcastReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const BroadcastReq& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BroadcastReq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ChatRoom.Comet.BroadcastReq";
  }
  protected:
  explicit BroadcastReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProtoFieldNumber = 2,
    kProtoOpFieldNumber = 1,
    kSpeedFieldNumber = 3,
  };
  // .ChatRoom.Protocol.Proto proto = 2;
  bool has_proto() const;
  private:
  bool _internal_has_proto() const;
  public:
  void clear_proto();
  const ::ChatRoom::Protocol::Proto& proto() const;
  PROTOBUF_NODISCARD ::ChatRoom::Protocol::Proto* release_proto();
  ::ChatRoom::Protocol::Proto* mutable_proto();
  void set_allocated_proto(::ChatRoom::Protocol::Proto* proto);
  private:
  const ::ChatRoom::Protocol::Proto& _internal_proto() const;
  ::ChatRoom::Protocol::Proto* _internal_mutable_proto();
  public:
  void unsafe_arena_set_allocated_proto(
      ::ChatRoom::Protocol::Proto* proto);
  ::ChatRoom::Protocol::Proto* unsafe_arena_release_proto();

  // int32 protoOp = 1;
  void clear_protoop();
  int32_t protoop() const;
  void set_protoop(int32_t value);
  private:
  int32_t _internal_protoop() const;
  void _internal_set_protoop(int32_t value);
  public:

  // int32 speed = 3;
  void clear_speed();
  int32_t speed() const;
  void set_speed(int32_t value);
  private:
  int32_t _internal_speed() const;
  void _internal_set_speed(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ChatRoom.Comet.BroadcastReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::ChatRoom::Protocol::Proto* proto_;
  int32_t protoop_;
  int32_t speed_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ChatRoom_2eComet_2eproto;
};
// -------------------------------------------------------------------

class BroadcastReply final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:ChatRoom.Comet.BroadcastReply) */ {
 public:
  inline BroadcastReply() : BroadcastReply(nullptr) {}
  explicit constexpr BroadcastReply(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BroadcastReply(const BroadcastReply& from);
  BroadcastReply(BroadcastReply&& from) noexcept
    : BroadcastReply() {
    *this = ::std::move(from);
  }

  inline BroadcastReply& operator=(const BroadcastReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline BroadcastReply& operator=(BroadcastReply&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BroadcastReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const BroadcastReply* internal_default_instance() {
    return reinterpret_cast<const BroadcastReply*>(
               &_BroadcastReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(BroadcastReply& a, BroadcastReply& b) {
    a.Swap(&b);
  }
  inline void Swap(BroadcastReply* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BroadcastReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BroadcastReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BroadcastReply>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const BroadcastReply& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const BroadcastReply& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ChatRoom.Comet.BroadcastReply";
  }
  protected:
  explicit BroadcastReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:ChatRoom.Comet.BroadcastReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ChatRoom_2eComet_2eproto;
};
// -------------------------------------------------------------------

class BroadcastRoomReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ChatRoom.Comet.BroadcastRoomReq) */ {
 public:
  inline BroadcastRoomReq() : BroadcastRoomReq(nullptr) {}
  ~BroadcastRoomReq() override;
  explicit constexpr BroadcastRoomReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BroadcastRoomReq(const BroadcastRoomReq& from);
  BroadcastRoomReq(BroadcastRoomReq&& from) noexcept
    : BroadcastRoomReq() {
    *this = ::std::move(from);
  }

  inline BroadcastRoomReq& operator=(const BroadcastRoomReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline BroadcastRoomReq& operator=(BroadcastRoomReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BroadcastRoomReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const BroadcastRoomReq* internal_default_instance() {
    return reinterpret_cast<const BroadcastRoomReq*>(
               &_BroadcastRoomReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(BroadcastRoomReq& a, BroadcastRoomReq& b) {
    a.Swap(&b);
  }
  inline void Swap(BroadcastRoomReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BroadcastRoomReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BroadcastRoomReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BroadcastRoomReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BroadcastRoomReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const BroadcastRoomReq& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BroadcastRoomReq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ChatRoom.Comet.BroadcastRoomReq";
  }
  protected:
  explicit BroadcastRoomReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoomIDFieldNumber = 1,
    kProtoFieldNumber = 2,
  };
  // string roomID = 1;
  void clear_roomid();
  const std::string& roomid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_roomid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_roomid();
  PROTOBUF_NODISCARD std::string* release_roomid();
  void set_allocated_roomid(std::string* roomid);
  private:
  const std::string& _internal_roomid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_roomid(const std::string& value);
  std::string* _internal_mutable_roomid();
  public:

  // .ChatRoom.Protocol.Proto proto = 2;
  bool has_proto() const;
  private:
  bool _internal_has_proto() const;
  public:
  void clear_proto();
  const ::ChatRoom::Protocol::Proto& proto() const;
  PROTOBUF_NODISCARD ::ChatRoom::Protocol::Proto* release_proto();
  ::ChatRoom::Protocol::Proto* mutable_proto();
  void set_allocated_proto(::ChatRoom::Protocol::Proto* proto);
  private:
  const ::ChatRoom::Protocol::Proto& _internal_proto() const;
  ::ChatRoom::Protocol::Proto* _internal_mutable_proto();
  public:
  void unsafe_arena_set_allocated_proto(
      ::ChatRoom::Protocol::Proto* proto);
  ::ChatRoom::Protocol::Proto* unsafe_arena_release_proto();

  // @@protoc_insertion_point(class_scope:ChatRoom.Comet.BroadcastRoomReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr roomid_;
  ::ChatRoom::Protocol::Proto* proto_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ChatRoom_2eComet_2eproto;
};
// -------------------------------------------------------------------

class BroadcastRoomReply final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:ChatRoom.Comet.BroadcastRoomReply) */ {
 public:
  inline BroadcastRoomReply() : BroadcastRoomReply(nullptr) {}
  explicit constexpr BroadcastRoomReply(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BroadcastRoomReply(const BroadcastRoomReply& from);
  BroadcastRoomReply(BroadcastRoomReply&& from) noexcept
    : BroadcastRoomReply() {
    *this = ::std::move(from);
  }

  inline BroadcastRoomReply& operator=(const BroadcastRoomReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline BroadcastRoomReply& operator=(BroadcastRoomReply&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BroadcastRoomReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const BroadcastRoomReply* internal_default_instance() {
    return reinterpret_cast<const BroadcastRoomReply*>(
               &_BroadcastRoomReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(BroadcastRoomReply& a, BroadcastRoomReply& b) {
    a.Swap(&b);
  }
  inline void Swap(BroadcastRoomReply* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BroadcastRoomReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BroadcastRoomReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BroadcastRoomReply>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const BroadcastRoomReply& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const BroadcastRoomReply& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ChatRoom.Comet.BroadcastRoomReply";
  }
  protected:
  explicit BroadcastRoomReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:ChatRoom.Comet.BroadcastRoomReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ChatRoom_2eComet_2eproto;
};
// -------------------------------------------------------------------

class RoomsReq final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:ChatRoom.Comet.RoomsReq) */ {
 public:
  inline RoomsReq() : RoomsReq(nullptr) {}
  explicit constexpr RoomsReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RoomsReq(const RoomsReq& from);
  RoomsReq(RoomsReq&& from) noexcept
    : RoomsReq() {
    *this = ::std::move(from);
  }

  inline RoomsReq& operator=(const RoomsReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline RoomsReq& operator=(RoomsReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RoomsReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const RoomsReq* internal_default_instance() {
    return reinterpret_cast<const RoomsReq*>(
               &_RoomsReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(RoomsReq& a, RoomsReq& b) {
    a.Swap(&b);
  }
  inline void Swap(RoomsReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RoomsReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RoomsReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RoomsReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const RoomsReq& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const RoomsReq& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ChatRoom.Comet.RoomsReq";
  }
  protected:
  explicit RoomsReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:ChatRoom.Comet.RoomsReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ChatRoom_2eComet_2eproto;
};
// -------------------------------------------------------------------

class RoomsReply_RoomsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<RoomsReply_RoomsEntry_DoNotUse, 
    std::string, bool,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<RoomsReply_RoomsEntry_DoNotUse, 
    std::string, bool,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL> SuperType;
  RoomsReply_RoomsEntry_DoNotUse();
  explicit constexpr RoomsReply_RoomsEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit RoomsReply_RoomsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const RoomsReply_RoomsEntry_DoNotUse& other);
  static const RoomsReply_RoomsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const RoomsReply_RoomsEntry_DoNotUse*>(&_RoomsReply_RoomsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "ChatRoom.Comet.RoomsReply.RoomsEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
};

// -------------------------------------------------------------------

class RoomsReply final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ChatRoom.Comet.RoomsReply) */ {
 public:
  inline RoomsReply() : RoomsReply(nullptr) {}
  ~RoomsReply() override;
  explicit constexpr RoomsReply(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RoomsReply(const RoomsReply& from);
  RoomsReply(RoomsReply&& from) noexcept
    : RoomsReply() {
    *this = ::std::move(from);
  }

  inline RoomsReply& operator=(const RoomsReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline RoomsReply& operator=(RoomsReply&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RoomsReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const RoomsReply* internal_default_instance() {
    return reinterpret_cast<const RoomsReply*>(
               &_RoomsReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(RoomsReply& a, RoomsReply& b) {
    a.Swap(&b);
  }
  inline void Swap(RoomsReply* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RoomsReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RoomsReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RoomsReply>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RoomsReply& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RoomsReply& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RoomsReply* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ChatRoom.Comet.RoomsReply";
  }
  protected:
  explicit RoomsReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kRoomsFieldNumber = 1,
  };
  // map<string, bool> rooms = 1;
  int rooms_size() const;
  private:
  int _internal_rooms_size() const;
  public:
  void clear_rooms();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, bool >&
      _internal_rooms() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, bool >*
      _internal_mutable_rooms();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, bool >&
      rooms() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, bool >*
      mutable_rooms();

  // @@protoc_insertion_point(class_scope:ChatRoom.Comet.RoomsReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      RoomsReply_RoomsEntry_DoNotUse,
      std::string, bool,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL> rooms_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ChatRoom_2eComet_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PushMsgReq

// repeated string keys = 1;
inline int PushMsgReq::_internal_keys_size() const {
  return keys_.size();
}
inline int PushMsgReq::keys_size() const {
  return _internal_keys_size();
}
inline void PushMsgReq::clear_keys() {
  keys_.Clear();
}
inline std::string* PushMsgReq::add_keys() {
  std::string* _s = _internal_add_keys();
  // @@protoc_insertion_point(field_add_mutable:ChatRoom.Comet.PushMsgReq.keys)
  return _s;
}
inline const std::string& PushMsgReq::_internal_keys(int index) const {
  return keys_.Get(index);
}
inline const std::string& PushMsgReq::keys(int index) const {
  // @@protoc_insertion_point(field_get:ChatRoom.Comet.PushMsgReq.keys)
  return _internal_keys(index);
}
inline std::string* PushMsgReq::mutable_keys(int index) {
  // @@protoc_insertion_point(field_mutable:ChatRoom.Comet.PushMsgReq.keys)
  return keys_.Mutable(index);
}
inline void PushMsgReq::set_keys(int index, const std::string& value) {
  keys_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:ChatRoom.Comet.PushMsgReq.keys)
}
inline void PushMsgReq::set_keys(int index, std::string&& value) {
  keys_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:ChatRoom.Comet.PushMsgReq.keys)
}
inline void PushMsgReq::set_keys(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  keys_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ChatRoom.Comet.PushMsgReq.keys)
}
inline void PushMsgReq::set_keys(int index, const char* value, size_t size) {
  keys_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ChatRoom.Comet.PushMsgReq.keys)
}
inline std::string* PushMsgReq::_internal_add_keys() {
  return keys_.Add();
}
inline void PushMsgReq::add_keys(const std::string& value) {
  keys_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ChatRoom.Comet.PushMsgReq.keys)
}
inline void PushMsgReq::add_keys(std::string&& value) {
  keys_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ChatRoom.Comet.PushMsgReq.keys)
}
inline void PushMsgReq::add_keys(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  keys_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ChatRoom.Comet.PushMsgReq.keys)
}
inline void PushMsgReq::add_keys(const char* value, size_t size) {
  keys_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ChatRoom.Comet.PushMsgReq.keys)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
PushMsgReq::keys() const {
  // @@protoc_insertion_point(field_list:ChatRoom.Comet.PushMsgReq.keys)
  return keys_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
PushMsgReq::mutable_keys() {
  // @@protoc_insertion_point(field_mutable_list:ChatRoom.Comet.PushMsgReq.keys)
  return &keys_;
}

// int32 protoOp = 3;
inline void PushMsgReq::clear_protoop() {
  protoop_ = 0;
}
inline int32_t PushMsgReq::_internal_protoop() const {
  return protoop_;
}
inline int32_t PushMsgReq::protoop() const {
  // @@protoc_insertion_point(field_get:ChatRoom.Comet.PushMsgReq.protoOp)
  return _internal_protoop();
}
inline void PushMsgReq::_internal_set_protoop(int32_t value) {
  
  protoop_ = value;
}
inline void PushMsgReq::set_protoop(int32_t value) {
  _internal_set_protoop(value);
  // @@protoc_insertion_point(field_set:ChatRoom.Comet.PushMsgReq.protoOp)
}

// .ChatRoom.Protocol.Proto proto = 2;
inline bool PushMsgReq::_internal_has_proto() const {
  return this != internal_default_instance() && proto_ != nullptr;
}
inline bool PushMsgReq::has_proto() const {
  return _internal_has_proto();
}
inline const ::ChatRoom::Protocol::Proto& PushMsgReq::_internal_proto() const {
  const ::ChatRoom::Protocol::Proto* p = proto_;
  return p != nullptr ? *p : reinterpret_cast<const ::ChatRoom::Protocol::Proto&>(
      ::ChatRoom::Protocol::_Proto_default_instance_);
}
inline const ::ChatRoom::Protocol::Proto& PushMsgReq::proto() const {
  // @@protoc_insertion_point(field_get:ChatRoom.Comet.PushMsgReq.proto)
  return _internal_proto();
}
inline void PushMsgReq::unsafe_arena_set_allocated_proto(
    ::ChatRoom::Protocol::Proto* proto) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(proto_);
  }
  proto_ = proto;
  if (proto) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ChatRoom.Comet.PushMsgReq.proto)
}
inline ::ChatRoom::Protocol::Proto* PushMsgReq::release_proto() {
  
  ::ChatRoom::Protocol::Proto* temp = proto_;
  proto_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ChatRoom::Protocol::Proto* PushMsgReq::unsafe_arena_release_proto() {
  // @@protoc_insertion_point(field_release:ChatRoom.Comet.PushMsgReq.proto)
  
  ::ChatRoom::Protocol::Proto* temp = proto_;
  proto_ = nullptr;
  return temp;
}
inline ::ChatRoom::Protocol::Proto* PushMsgReq::_internal_mutable_proto() {
  
  if (proto_ == nullptr) {
    auto* p = CreateMaybeMessage<::ChatRoom::Protocol::Proto>(GetArenaForAllocation());
    proto_ = p;
  }
  return proto_;
}
inline ::ChatRoom::Protocol::Proto* PushMsgReq::mutable_proto() {
  ::ChatRoom::Protocol::Proto* _msg = _internal_mutable_proto();
  // @@protoc_insertion_point(field_mutable:ChatRoom.Comet.PushMsgReq.proto)
  return _msg;
}
inline void PushMsgReq::set_allocated_proto(::ChatRoom::Protocol::Proto* proto) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(proto_);
  }
  if (proto) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(proto));
    if (message_arena != submessage_arena) {
      proto = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, proto, submessage_arena);
    }
    
  } else {
    
  }
  proto_ = proto;
  // @@protoc_insertion_point(field_set_allocated:ChatRoom.Comet.PushMsgReq.proto)
}

// -------------------------------------------------------------------

// PushMsgReply

// -------------------------------------------------------------------

// BroadcastReq

// int32 protoOp = 1;
inline void BroadcastReq::clear_protoop() {
  protoop_ = 0;
}
inline int32_t BroadcastReq::_internal_protoop() const {
  return protoop_;
}
inline int32_t BroadcastReq::protoop() const {
  // @@protoc_insertion_point(field_get:ChatRoom.Comet.BroadcastReq.protoOp)
  return _internal_protoop();
}
inline void BroadcastReq::_internal_set_protoop(int32_t value) {
  
  protoop_ = value;
}
inline void BroadcastReq::set_protoop(int32_t value) {
  _internal_set_protoop(value);
  // @@protoc_insertion_point(field_set:ChatRoom.Comet.BroadcastReq.protoOp)
}

// .ChatRoom.Protocol.Proto proto = 2;
inline bool BroadcastReq::_internal_has_proto() const {
  return this != internal_default_instance() && proto_ != nullptr;
}
inline bool BroadcastReq::has_proto() const {
  return _internal_has_proto();
}
inline const ::ChatRoom::Protocol::Proto& BroadcastReq::_internal_proto() const {
  const ::ChatRoom::Protocol::Proto* p = proto_;
  return p != nullptr ? *p : reinterpret_cast<const ::ChatRoom::Protocol::Proto&>(
      ::ChatRoom::Protocol::_Proto_default_instance_);
}
inline const ::ChatRoom::Protocol::Proto& BroadcastReq::proto() const {
  // @@protoc_insertion_point(field_get:ChatRoom.Comet.BroadcastReq.proto)
  return _internal_proto();
}
inline void BroadcastReq::unsafe_arena_set_allocated_proto(
    ::ChatRoom::Protocol::Proto* proto) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(proto_);
  }
  proto_ = proto;
  if (proto) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ChatRoom.Comet.BroadcastReq.proto)
}
inline ::ChatRoom::Protocol::Proto* BroadcastReq::release_proto() {
  
  ::ChatRoom::Protocol::Proto* temp = proto_;
  proto_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ChatRoom::Protocol::Proto* BroadcastReq::unsafe_arena_release_proto() {
  // @@protoc_insertion_point(field_release:ChatRoom.Comet.BroadcastReq.proto)
  
  ::ChatRoom::Protocol::Proto* temp = proto_;
  proto_ = nullptr;
  return temp;
}
inline ::ChatRoom::Protocol::Proto* BroadcastReq::_internal_mutable_proto() {
  
  if (proto_ == nullptr) {
    auto* p = CreateMaybeMessage<::ChatRoom::Protocol::Proto>(GetArenaForAllocation());
    proto_ = p;
  }
  return proto_;
}
inline ::ChatRoom::Protocol::Proto* BroadcastReq::mutable_proto() {
  ::ChatRoom::Protocol::Proto* _msg = _internal_mutable_proto();
  // @@protoc_insertion_point(field_mutable:ChatRoom.Comet.BroadcastReq.proto)
  return _msg;
}
inline void BroadcastReq::set_allocated_proto(::ChatRoom::Protocol::Proto* proto) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(proto_);
  }
  if (proto) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(proto));
    if (message_arena != submessage_arena) {
      proto = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, proto, submessage_arena);
    }
    
  } else {
    
  }
  proto_ = proto;
  // @@protoc_insertion_point(field_set_allocated:ChatRoom.Comet.BroadcastReq.proto)
}

// int32 speed = 3;
inline void BroadcastReq::clear_speed() {
  speed_ = 0;
}
inline int32_t BroadcastReq::_internal_speed() const {
  return speed_;
}
inline int32_t BroadcastReq::speed() const {
  // @@protoc_insertion_point(field_get:ChatRoom.Comet.BroadcastReq.speed)
  return _internal_speed();
}
inline void BroadcastReq::_internal_set_speed(int32_t value) {
  
  speed_ = value;
}
inline void BroadcastReq::set_speed(int32_t value) {
  _internal_set_speed(value);
  // @@protoc_insertion_point(field_set:ChatRoom.Comet.BroadcastReq.speed)
}

// -------------------------------------------------------------------

// BroadcastReply

// -------------------------------------------------------------------

// BroadcastRoomReq

// string roomID = 1;
inline void BroadcastRoomReq::clear_roomid() {
  roomid_.ClearToEmpty();
}
inline const std::string& BroadcastRoomReq::roomid() const {
  // @@protoc_insertion_point(field_get:ChatRoom.Comet.BroadcastRoomReq.roomID)
  return _internal_roomid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BroadcastRoomReq::set_roomid(ArgT0&& arg0, ArgT... args) {
 
 roomid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ChatRoom.Comet.BroadcastRoomReq.roomID)
}
inline std::string* BroadcastRoomReq::mutable_roomid() {
  std::string* _s = _internal_mutable_roomid();
  // @@protoc_insertion_point(field_mutable:ChatRoom.Comet.BroadcastRoomReq.roomID)
  return _s;
}
inline const std::string& BroadcastRoomReq::_internal_roomid() const {
  return roomid_.Get();
}
inline void BroadcastRoomReq::_internal_set_roomid(const std::string& value) {
  
  roomid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* BroadcastRoomReq::_internal_mutable_roomid() {
  
  return roomid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* BroadcastRoomReq::release_roomid() {
  // @@protoc_insertion_point(field_release:ChatRoom.Comet.BroadcastRoomReq.roomID)
  return roomid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void BroadcastRoomReq::set_allocated_roomid(std::string* roomid) {
  if (roomid != nullptr) {
    
  } else {
    
  }
  roomid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), roomid,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (roomid_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    roomid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ChatRoom.Comet.BroadcastRoomReq.roomID)
}

// .ChatRoom.Protocol.Proto proto = 2;
inline bool BroadcastRoomReq::_internal_has_proto() const {
  return this != internal_default_instance() && proto_ != nullptr;
}
inline bool BroadcastRoomReq::has_proto() const {
  return _internal_has_proto();
}
inline const ::ChatRoom::Protocol::Proto& BroadcastRoomReq::_internal_proto() const {
  const ::ChatRoom::Protocol::Proto* p = proto_;
  return p != nullptr ? *p : reinterpret_cast<const ::ChatRoom::Protocol::Proto&>(
      ::ChatRoom::Protocol::_Proto_default_instance_);
}
inline const ::ChatRoom::Protocol::Proto& BroadcastRoomReq::proto() const {
  // @@protoc_insertion_point(field_get:ChatRoom.Comet.BroadcastRoomReq.proto)
  return _internal_proto();
}
inline void BroadcastRoomReq::unsafe_arena_set_allocated_proto(
    ::ChatRoom::Protocol::Proto* proto) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(proto_);
  }
  proto_ = proto;
  if (proto) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ChatRoom.Comet.BroadcastRoomReq.proto)
}
inline ::ChatRoom::Protocol::Proto* BroadcastRoomReq::release_proto() {
  
  ::ChatRoom::Protocol::Proto* temp = proto_;
  proto_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ChatRoom::Protocol::Proto* BroadcastRoomReq::unsafe_arena_release_proto() {
  // @@protoc_insertion_point(field_release:ChatRoom.Comet.BroadcastRoomReq.proto)
  
  ::ChatRoom::Protocol::Proto* temp = proto_;
  proto_ = nullptr;
  return temp;
}
inline ::ChatRoom::Protocol::Proto* BroadcastRoomReq::_internal_mutable_proto() {
  
  if (proto_ == nullptr) {
    auto* p = CreateMaybeMessage<::ChatRoom::Protocol::Proto>(GetArenaForAllocation());
    proto_ = p;
  }
  return proto_;
}
inline ::ChatRoom::Protocol::Proto* BroadcastRoomReq::mutable_proto() {
  ::ChatRoom::Protocol::Proto* _msg = _internal_mutable_proto();
  // @@protoc_insertion_point(field_mutable:ChatRoom.Comet.BroadcastRoomReq.proto)
  return _msg;
}
inline void BroadcastRoomReq::set_allocated_proto(::ChatRoom::Protocol::Proto* proto) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(proto_);
  }
  if (proto) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(proto));
    if (message_arena != submessage_arena) {
      proto = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, proto, submessage_arena);
    }
    
  } else {
    
  }
  proto_ = proto;
  // @@protoc_insertion_point(field_set_allocated:ChatRoom.Comet.BroadcastRoomReq.proto)
}

// -------------------------------------------------------------------

// BroadcastRoomReply

// -------------------------------------------------------------------

// RoomsReq

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// RoomsReply

// map<string, bool> rooms = 1;
inline int RoomsReply::_internal_rooms_size() const {
  return rooms_.size();
}
inline int RoomsReply::rooms_size() const {
  return _internal_rooms_size();
}
inline void RoomsReply::clear_rooms() {
  rooms_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, bool >&
RoomsReply::_internal_rooms() const {
  return rooms_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, bool >&
RoomsReply::rooms() const {
  // @@protoc_insertion_point(field_map:ChatRoom.Comet.RoomsReply.rooms)
  return _internal_rooms();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, bool >*
RoomsReply::_internal_mutable_rooms() {
  return rooms_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, bool >*
RoomsReply::mutable_rooms() {
  // @@protoc_insertion_point(field_mutable_map:ChatRoom.Comet.RoomsReply.rooms)
  return _internal_mutable_rooms();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Comet
}  // namespace ChatRoom

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ChatRoom_2eComet_2eproto
