// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: ChatRoom.Comet.proto
#ifndef GRPC_ChatRoom_2eComet_2eproto__INCLUDED
#define GRPC_ChatRoom_2eComet_2eproto__INCLUDED

#include "ChatRoom.Comet.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace ChatRoom {
namespace Comet {

class Comet final {
 public:
  static constexpr char const* service_full_name() {
    return "ChatRoom.Comet.Comet";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // PushMsg push by key or mid
    virtual ::grpc::Status PushMsg(::grpc::ClientContext* context, const ::ChatRoom::Comet::PushMsgReq& request, ::ChatRoom::Comet::PushMsgReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ChatRoom::Comet::PushMsgReply>> AsyncPushMsg(::grpc::ClientContext* context, const ::ChatRoom::Comet::PushMsgReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ChatRoom::Comet::PushMsgReply>>(AsyncPushMsgRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ChatRoom::Comet::PushMsgReply>> PrepareAsyncPushMsg(::grpc::ClientContext* context, const ::ChatRoom::Comet::PushMsgReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ChatRoom::Comet::PushMsgReply>>(PrepareAsyncPushMsgRaw(context, request, cq));
    }
    // Broadcast send to every enrity
    virtual ::grpc::Status Broadcast(::grpc::ClientContext* context, const ::ChatRoom::Comet::BroadcastReq& request, ::ChatRoom::Comet::BroadcastReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ChatRoom::Comet::BroadcastReply>> AsyncBroadcast(::grpc::ClientContext* context, const ::ChatRoom::Comet::BroadcastReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ChatRoom::Comet::BroadcastReply>>(AsyncBroadcastRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ChatRoom::Comet::BroadcastReply>> PrepareAsyncBroadcast(::grpc::ClientContext* context, const ::ChatRoom::Comet::BroadcastReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ChatRoom::Comet::BroadcastReply>>(PrepareAsyncBroadcastRaw(context, request, cq));
    }
    // BroadcastRoom broadcast to one room
    virtual ::grpc::Status BroadcastRoom(::grpc::ClientContext* context, const ::ChatRoom::Comet::BroadcastRoomReq& request, ::ChatRoom::Comet::BroadcastRoomReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ChatRoom::Comet::BroadcastRoomReply>> AsyncBroadcastRoom(::grpc::ClientContext* context, const ::ChatRoom::Comet::BroadcastRoomReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ChatRoom::Comet::BroadcastRoomReply>>(AsyncBroadcastRoomRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ChatRoom::Comet::BroadcastRoomReply>> PrepareAsyncBroadcastRoom(::grpc::ClientContext* context, const ::ChatRoom::Comet::BroadcastRoomReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ChatRoom::Comet::BroadcastRoomReply>>(PrepareAsyncBroadcastRoomRaw(context, request, cq));
    }
    // Rooms get all rooms
    virtual ::grpc::Status Rooms(::grpc::ClientContext* context, const ::ChatRoom::Comet::RoomsReq& request, ::ChatRoom::Comet::RoomsReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ChatRoom::Comet::RoomsReply>> AsyncRooms(::grpc::ClientContext* context, const ::ChatRoom::Comet::RoomsReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ChatRoom::Comet::RoomsReply>>(AsyncRoomsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ChatRoom::Comet::RoomsReply>> PrepareAsyncRooms(::grpc::ClientContext* context, const ::ChatRoom::Comet::RoomsReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ChatRoom::Comet::RoomsReply>>(PrepareAsyncRoomsRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // PushMsg push by key or mid
      virtual void PushMsg(::grpc::ClientContext* context, const ::ChatRoom::Comet::PushMsgReq* request, ::ChatRoom::Comet::PushMsgReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void PushMsg(::grpc::ClientContext* context, const ::ChatRoom::Comet::PushMsgReq* request, ::ChatRoom::Comet::PushMsgReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Broadcast send to every enrity
      virtual void Broadcast(::grpc::ClientContext* context, const ::ChatRoom::Comet::BroadcastReq* request, ::ChatRoom::Comet::BroadcastReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Broadcast(::grpc::ClientContext* context, const ::ChatRoom::Comet::BroadcastReq* request, ::ChatRoom::Comet::BroadcastReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // BroadcastRoom broadcast to one room
      virtual void BroadcastRoom(::grpc::ClientContext* context, const ::ChatRoom::Comet::BroadcastRoomReq* request, ::ChatRoom::Comet::BroadcastRoomReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void BroadcastRoom(::grpc::ClientContext* context, const ::ChatRoom::Comet::BroadcastRoomReq* request, ::ChatRoom::Comet::BroadcastRoomReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Rooms get all rooms
      virtual void Rooms(::grpc::ClientContext* context, const ::ChatRoom::Comet::RoomsReq* request, ::ChatRoom::Comet::RoomsReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Rooms(::grpc::ClientContext* context, const ::ChatRoom::Comet::RoomsReq* request, ::ChatRoom::Comet::RoomsReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ChatRoom::Comet::PushMsgReply>* AsyncPushMsgRaw(::grpc::ClientContext* context, const ::ChatRoom::Comet::PushMsgReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ChatRoom::Comet::PushMsgReply>* PrepareAsyncPushMsgRaw(::grpc::ClientContext* context, const ::ChatRoom::Comet::PushMsgReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ChatRoom::Comet::BroadcastReply>* AsyncBroadcastRaw(::grpc::ClientContext* context, const ::ChatRoom::Comet::BroadcastReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ChatRoom::Comet::BroadcastReply>* PrepareAsyncBroadcastRaw(::grpc::ClientContext* context, const ::ChatRoom::Comet::BroadcastReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ChatRoom::Comet::BroadcastRoomReply>* AsyncBroadcastRoomRaw(::grpc::ClientContext* context, const ::ChatRoom::Comet::BroadcastRoomReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ChatRoom::Comet::BroadcastRoomReply>* PrepareAsyncBroadcastRoomRaw(::grpc::ClientContext* context, const ::ChatRoom::Comet::BroadcastRoomReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ChatRoom::Comet::RoomsReply>* AsyncRoomsRaw(::grpc::ClientContext* context, const ::ChatRoom::Comet::RoomsReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ChatRoom::Comet::RoomsReply>* PrepareAsyncRoomsRaw(::grpc::ClientContext* context, const ::ChatRoom::Comet::RoomsReq& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status PushMsg(::grpc::ClientContext* context, const ::ChatRoom::Comet::PushMsgReq& request, ::ChatRoom::Comet::PushMsgReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ChatRoom::Comet::PushMsgReply>> AsyncPushMsg(::grpc::ClientContext* context, const ::ChatRoom::Comet::PushMsgReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ChatRoom::Comet::PushMsgReply>>(AsyncPushMsgRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ChatRoom::Comet::PushMsgReply>> PrepareAsyncPushMsg(::grpc::ClientContext* context, const ::ChatRoom::Comet::PushMsgReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ChatRoom::Comet::PushMsgReply>>(PrepareAsyncPushMsgRaw(context, request, cq));
    }
    ::grpc::Status Broadcast(::grpc::ClientContext* context, const ::ChatRoom::Comet::BroadcastReq& request, ::ChatRoom::Comet::BroadcastReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ChatRoom::Comet::BroadcastReply>> AsyncBroadcast(::grpc::ClientContext* context, const ::ChatRoom::Comet::BroadcastReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ChatRoom::Comet::BroadcastReply>>(AsyncBroadcastRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ChatRoom::Comet::BroadcastReply>> PrepareAsyncBroadcast(::grpc::ClientContext* context, const ::ChatRoom::Comet::BroadcastReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ChatRoom::Comet::BroadcastReply>>(PrepareAsyncBroadcastRaw(context, request, cq));
    }
    ::grpc::Status BroadcastRoom(::grpc::ClientContext* context, const ::ChatRoom::Comet::BroadcastRoomReq& request, ::ChatRoom::Comet::BroadcastRoomReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ChatRoom::Comet::BroadcastRoomReply>> AsyncBroadcastRoom(::grpc::ClientContext* context, const ::ChatRoom::Comet::BroadcastRoomReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ChatRoom::Comet::BroadcastRoomReply>>(AsyncBroadcastRoomRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ChatRoom::Comet::BroadcastRoomReply>> PrepareAsyncBroadcastRoom(::grpc::ClientContext* context, const ::ChatRoom::Comet::BroadcastRoomReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ChatRoom::Comet::BroadcastRoomReply>>(PrepareAsyncBroadcastRoomRaw(context, request, cq));
    }
    ::grpc::Status Rooms(::grpc::ClientContext* context, const ::ChatRoom::Comet::RoomsReq& request, ::ChatRoom::Comet::RoomsReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ChatRoom::Comet::RoomsReply>> AsyncRooms(::grpc::ClientContext* context, const ::ChatRoom::Comet::RoomsReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ChatRoom::Comet::RoomsReply>>(AsyncRoomsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ChatRoom::Comet::RoomsReply>> PrepareAsyncRooms(::grpc::ClientContext* context, const ::ChatRoom::Comet::RoomsReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ChatRoom::Comet::RoomsReply>>(PrepareAsyncRoomsRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void PushMsg(::grpc::ClientContext* context, const ::ChatRoom::Comet::PushMsgReq* request, ::ChatRoom::Comet::PushMsgReply* response, std::function<void(::grpc::Status)>) override;
      void PushMsg(::grpc::ClientContext* context, const ::ChatRoom::Comet::PushMsgReq* request, ::ChatRoom::Comet::PushMsgReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      void Broadcast(::grpc::ClientContext* context, const ::ChatRoom::Comet::BroadcastReq* request, ::ChatRoom::Comet::BroadcastReply* response, std::function<void(::grpc::Status)>) override;
      void Broadcast(::grpc::ClientContext* context, const ::ChatRoom::Comet::BroadcastReq* request, ::ChatRoom::Comet::BroadcastReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      void BroadcastRoom(::grpc::ClientContext* context, const ::ChatRoom::Comet::BroadcastRoomReq* request, ::ChatRoom::Comet::BroadcastRoomReply* response, std::function<void(::grpc::Status)>) override;
      void BroadcastRoom(::grpc::ClientContext* context, const ::ChatRoom::Comet::BroadcastRoomReq* request, ::ChatRoom::Comet::BroadcastRoomReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      void Rooms(::grpc::ClientContext* context, const ::ChatRoom::Comet::RoomsReq* request, ::ChatRoom::Comet::RoomsReply* response, std::function<void(::grpc::Status)>) override;
      void Rooms(::grpc::ClientContext* context, const ::ChatRoom::Comet::RoomsReq* request, ::ChatRoom::Comet::RoomsReply* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::ChatRoom::Comet::PushMsgReply>* AsyncPushMsgRaw(::grpc::ClientContext* context, const ::ChatRoom::Comet::PushMsgReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ChatRoom::Comet::PushMsgReply>* PrepareAsyncPushMsgRaw(::grpc::ClientContext* context, const ::ChatRoom::Comet::PushMsgReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ChatRoom::Comet::BroadcastReply>* AsyncBroadcastRaw(::grpc::ClientContext* context, const ::ChatRoom::Comet::BroadcastReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ChatRoom::Comet::BroadcastReply>* PrepareAsyncBroadcastRaw(::grpc::ClientContext* context, const ::ChatRoom::Comet::BroadcastReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ChatRoom::Comet::BroadcastRoomReply>* AsyncBroadcastRoomRaw(::grpc::ClientContext* context, const ::ChatRoom::Comet::BroadcastRoomReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ChatRoom::Comet::BroadcastRoomReply>* PrepareAsyncBroadcastRoomRaw(::grpc::ClientContext* context, const ::ChatRoom::Comet::BroadcastRoomReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ChatRoom::Comet::RoomsReply>* AsyncRoomsRaw(::grpc::ClientContext* context, const ::ChatRoom::Comet::RoomsReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ChatRoom::Comet::RoomsReply>* PrepareAsyncRoomsRaw(::grpc::ClientContext* context, const ::ChatRoom::Comet::RoomsReq& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_PushMsg_;
    const ::grpc::internal::RpcMethod rpcmethod_Broadcast_;
    const ::grpc::internal::RpcMethod rpcmethod_BroadcastRoom_;
    const ::grpc::internal::RpcMethod rpcmethod_Rooms_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // PushMsg push by key or mid
    virtual ::grpc::Status PushMsg(::grpc::ServerContext* context, const ::ChatRoom::Comet::PushMsgReq* request, ::ChatRoom::Comet::PushMsgReply* response);
    // Broadcast send to every enrity
    virtual ::grpc::Status Broadcast(::grpc::ServerContext* context, const ::ChatRoom::Comet::BroadcastReq* request, ::ChatRoom::Comet::BroadcastReply* response);
    // BroadcastRoom broadcast to one room
    virtual ::grpc::Status BroadcastRoom(::grpc::ServerContext* context, const ::ChatRoom::Comet::BroadcastRoomReq* request, ::ChatRoom::Comet::BroadcastRoomReply* response);
    // Rooms get all rooms
    virtual ::grpc::Status Rooms(::grpc::ServerContext* context, const ::ChatRoom::Comet::RoomsReq* request, ::ChatRoom::Comet::RoomsReply* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_PushMsg : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_PushMsg() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_PushMsg() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PushMsg(::grpc::ServerContext* /*context*/, const ::ChatRoom::Comet::PushMsgReq* /*request*/, ::ChatRoom::Comet::PushMsgReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPushMsg(::grpc::ServerContext* context, ::ChatRoom::Comet::PushMsgReq* request, ::grpc::ServerAsyncResponseWriter< ::ChatRoom::Comet::PushMsgReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Broadcast : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Broadcast() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_Broadcast() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Broadcast(::grpc::ServerContext* /*context*/, const ::ChatRoom::Comet::BroadcastReq* /*request*/, ::ChatRoom::Comet::BroadcastReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestBroadcast(::grpc::ServerContext* context, ::ChatRoom::Comet::BroadcastReq* request, ::grpc::ServerAsyncResponseWriter< ::ChatRoom::Comet::BroadcastReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_BroadcastRoom : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_BroadcastRoom() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_BroadcastRoom() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BroadcastRoom(::grpc::ServerContext* /*context*/, const ::ChatRoom::Comet::BroadcastRoomReq* /*request*/, ::ChatRoom::Comet::BroadcastRoomReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestBroadcastRoom(::grpc::ServerContext* context, ::ChatRoom::Comet::BroadcastRoomReq* request, ::grpc::ServerAsyncResponseWriter< ::ChatRoom::Comet::BroadcastRoomReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Rooms : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Rooms() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_Rooms() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Rooms(::grpc::ServerContext* /*context*/, const ::ChatRoom::Comet::RoomsReq* /*request*/, ::ChatRoom::Comet::RoomsReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRooms(::grpc::ServerContext* context, ::ChatRoom::Comet::RoomsReq* request, ::grpc::ServerAsyncResponseWriter< ::ChatRoom::Comet::RoomsReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_PushMsg<WithAsyncMethod_Broadcast<WithAsyncMethod_BroadcastRoom<WithAsyncMethod_Rooms<Service > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_PushMsg : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_PushMsg() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::ChatRoom::Comet::PushMsgReq, ::ChatRoom::Comet::PushMsgReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::ChatRoom::Comet::PushMsgReq* request, ::ChatRoom::Comet::PushMsgReply* response) { return this->PushMsg(context, request, response); }));}
    void SetMessageAllocatorFor_PushMsg(
        ::grpc::MessageAllocator< ::ChatRoom::Comet::PushMsgReq, ::ChatRoom::Comet::PushMsgReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::ChatRoom::Comet::PushMsgReq, ::ChatRoom::Comet::PushMsgReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_PushMsg() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PushMsg(::grpc::ServerContext* /*context*/, const ::ChatRoom::Comet::PushMsgReq* /*request*/, ::ChatRoom::Comet::PushMsgReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PushMsg(
      ::grpc::CallbackServerContext* /*context*/, const ::ChatRoom::Comet::PushMsgReq* /*request*/, ::ChatRoom::Comet::PushMsgReply* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Broadcast : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Broadcast() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::ChatRoom::Comet::BroadcastReq, ::ChatRoom::Comet::BroadcastReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::ChatRoom::Comet::BroadcastReq* request, ::ChatRoom::Comet::BroadcastReply* response) { return this->Broadcast(context, request, response); }));}
    void SetMessageAllocatorFor_Broadcast(
        ::grpc::MessageAllocator< ::ChatRoom::Comet::BroadcastReq, ::ChatRoom::Comet::BroadcastReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::ChatRoom::Comet::BroadcastReq, ::ChatRoom::Comet::BroadcastReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Broadcast() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Broadcast(::grpc::ServerContext* /*context*/, const ::ChatRoom::Comet::BroadcastReq* /*request*/, ::ChatRoom::Comet::BroadcastReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Broadcast(
      ::grpc::CallbackServerContext* /*context*/, const ::ChatRoom::Comet::BroadcastReq* /*request*/, ::ChatRoom::Comet::BroadcastReply* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_BroadcastRoom : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_BroadcastRoom() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::ChatRoom::Comet::BroadcastRoomReq, ::ChatRoom::Comet::BroadcastRoomReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::ChatRoom::Comet::BroadcastRoomReq* request, ::ChatRoom::Comet::BroadcastRoomReply* response) { return this->BroadcastRoom(context, request, response); }));}
    void SetMessageAllocatorFor_BroadcastRoom(
        ::grpc::MessageAllocator< ::ChatRoom::Comet::BroadcastRoomReq, ::ChatRoom::Comet::BroadcastRoomReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::ChatRoom::Comet::BroadcastRoomReq, ::ChatRoom::Comet::BroadcastRoomReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_BroadcastRoom() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BroadcastRoom(::grpc::ServerContext* /*context*/, const ::ChatRoom::Comet::BroadcastRoomReq* /*request*/, ::ChatRoom::Comet::BroadcastRoomReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* BroadcastRoom(
      ::grpc::CallbackServerContext* /*context*/, const ::ChatRoom::Comet::BroadcastRoomReq* /*request*/, ::ChatRoom::Comet::BroadcastRoomReply* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Rooms : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Rooms() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::ChatRoom::Comet::RoomsReq, ::ChatRoom::Comet::RoomsReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::ChatRoom::Comet::RoomsReq* request, ::ChatRoom::Comet::RoomsReply* response) { return this->Rooms(context, request, response); }));}
    void SetMessageAllocatorFor_Rooms(
        ::grpc::MessageAllocator< ::ChatRoom::Comet::RoomsReq, ::ChatRoom::Comet::RoomsReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::ChatRoom::Comet::RoomsReq, ::ChatRoom::Comet::RoomsReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Rooms() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Rooms(::grpc::ServerContext* /*context*/, const ::ChatRoom::Comet::RoomsReq* /*request*/, ::ChatRoom::Comet::RoomsReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Rooms(
      ::grpc::CallbackServerContext* /*context*/, const ::ChatRoom::Comet::RoomsReq* /*request*/, ::ChatRoom::Comet::RoomsReply* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_PushMsg<WithCallbackMethod_Broadcast<WithCallbackMethod_BroadcastRoom<WithCallbackMethod_Rooms<Service > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_PushMsg : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_PushMsg() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_PushMsg() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PushMsg(::grpc::ServerContext* /*context*/, const ::ChatRoom::Comet::PushMsgReq* /*request*/, ::ChatRoom::Comet::PushMsgReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Broadcast : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Broadcast() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_Broadcast() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Broadcast(::grpc::ServerContext* /*context*/, const ::ChatRoom::Comet::BroadcastReq* /*request*/, ::ChatRoom::Comet::BroadcastReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_BroadcastRoom : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_BroadcastRoom() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_BroadcastRoom() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BroadcastRoom(::grpc::ServerContext* /*context*/, const ::ChatRoom::Comet::BroadcastRoomReq* /*request*/, ::ChatRoom::Comet::BroadcastRoomReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Rooms : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Rooms() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_Rooms() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Rooms(::grpc::ServerContext* /*context*/, const ::ChatRoom::Comet::RoomsReq* /*request*/, ::ChatRoom::Comet::RoomsReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_PushMsg : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_PushMsg() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_PushMsg() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PushMsg(::grpc::ServerContext* /*context*/, const ::ChatRoom::Comet::PushMsgReq* /*request*/, ::ChatRoom::Comet::PushMsgReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPushMsg(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Broadcast : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Broadcast() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_Broadcast() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Broadcast(::grpc::ServerContext* /*context*/, const ::ChatRoom::Comet::BroadcastReq* /*request*/, ::ChatRoom::Comet::BroadcastReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestBroadcast(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_BroadcastRoom : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_BroadcastRoom() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_BroadcastRoom() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BroadcastRoom(::grpc::ServerContext* /*context*/, const ::ChatRoom::Comet::BroadcastRoomReq* /*request*/, ::ChatRoom::Comet::BroadcastRoomReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestBroadcastRoom(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Rooms : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Rooms() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_Rooms() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Rooms(::grpc::ServerContext* /*context*/, const ::ChatRoom::Comet::RoomsReq* /*request*/, ::ChatRoom::Comet::RoomsReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRooms(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_PushMsg : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_PushMsg() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->PushMsg(context, request, response); }));
    }
    ~WithRawCallbackMethod_PushMsg() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PushMsg(::grpc::ServerContext* /*context*/, const ::ChatRoom::Comet::PushMsgReq* /*request*/, ::ChatRoom::Comet::PushMsgReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PushMsg(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Broadcast : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Broadcast() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Broadcast(context, request, response); }));
    }
    ~WithRawCallbackMethod_Broadcast() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Broadcast(::grpc::ServerContext* /*context*/, const ::ChatRoom::Comet::BroadcastReq* /*request*/, ::ChatRoom::Comet::BroadcastReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Broadcast(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_BroadcastRoom : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_BroadcastRoom() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->BroadcastRoom(context, request, response); }));
    }
    ~WithRawCallbackMethod_BroadcastRoom() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BroadcastRoom(::grpc::ServerContext* /*context*/, const ::ChatRoom::Comet::BroadcastRoomReq* /*request*/, ::ChatRoom::Comet::BroadcastRoomReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* BroadcastRoom(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Rooms : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Rooms() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Rooms(context, request, response); }));
    }
    ~WithRawCallbackMethod_Rooms() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Rooms(::grpc::ServerContext* /*context*/, const ::ChatRoom::Comet::RoomsReq* /*request*/, ::ChatRoom::Comet::RoomsReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Rooms(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_PushMsg : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_PushMsg() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::ChatRoom::Comet::PushMsgReq, ::ChatRoom::Comet::PushMsgReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::ChatRoom::Comet::PushMsgReq, ::ChatRoom::Comet::PushMsgReply>* streamer) {
                       return this->StreamedPushMsg(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_PushMsg() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status PushMsg(::grpc::ServerContext* /*context*/, const ::ChatRoom::Comet::PushMsgReq* /*request*/, ::ChatRoom::Comet::PushMsgReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPushMsg(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ChatRoom::Comet::PushMsgReq,::ChatRoom::Comet::PushMsgReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Broadcast : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Broadcast() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::ChatRoom::Comet::BroadcastReq, ::ChatRoom::Comet::BroadcastReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::ChatRoom::Comet::BroadcastReq, ::ChatRoom::Comet::BroadcastReply>* streamer) {
                       return this->StreamedBroadcast(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Broadcast() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Broadcast(::grpc::ServerContext* /*context*/, const ::ChatRoom::Comet::BroadcastReq* /*request*/, ::ChatRoom::Comet::BroadcastReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedBroadcast(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ChatRoom::Comet::BroadcastReq,::ChatRoom::Comet::BroadcastReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_BroadcastRoom : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_BroadcastRoom() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::ChatRoom::Comet::BroadcastRoomReq, ::ChatRoom::Comet::BroadcastRoomReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::ChatRoom::Comet::BroadcastRoomReq, ::ChatRoom::Comet::BroadcastRoomReply>* streamer) {
                       return this->StreamedBroadcastRoom(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_BroadcastRoom() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status BroadcastRoom(::grpc::ServerContext* /*context*/, const ::ChatRoom::Comet::BroadcastRoomReq* /*request*/, ::ChatRoom::Comet::BroadcastRoomReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedBroadcastRoom(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ChatRoom::Comet::BroadcastRoomReq,::ChatRoom::Comet::BroadcastRoomReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Rooms : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Rooms() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::ChatRoom::Comet::RoomsReq, ::ChatRoom::Comet::RoomsReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::ChatRoom::Comet::RoomsReq, ::ChatRoom::Comet::RoomsReply>* streamer) {
                       return this->StreamedRooms(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Rooms() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Rooms(::grpc::ServerContext* /*context*/, const ::ChatRoom::Comet::RoomsReq* /*request*/, ::ChatRoom::Comet::RoomsReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRooms(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ChatRoom::Comet::RoomsReq,::ChatRoom::Comet::RoomsReply>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_PushMsg<WithStreamedUnaryMethod_Broadcast<WithStreamedUnaryMethod_BroadcastRoom<WithStreamedUnaryMethod_Rooms<Service > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_PushMsg<WithStreamedUnaryMethod_Broadcast<WithStreamedUnaryMethod_BroadcastRoom<WithStreamedUnaryMethod_Rooms<Service > > > > StreamedService;
};

}  // namespace Comet
}  // namespace ChatRoom


#endif  // GRPC_ChatRoom_2eComet_2eproto__INCLUDED
