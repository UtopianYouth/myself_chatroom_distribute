// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ChatRoom.Job.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ChatRoom_2eJob_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ChatRoom_2eJob_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ChatRoom_2eJob_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ChatRoom_2eJob_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
namespace ChatRoom {
namespace Job {
class Proto;
struct ProtoDefaultTypeInternal;
extern ProtoDefaultTypeInternal _Proto_default_instance_;
class PushMsg;
struct PushMsgDefaultTypeInternal;
extern PushMsgDefaultTypeInternal _PushMsg_default_instance_;
}  // namespace Job
}  // namespace ChatRoom
PROTOBUF_NAMESPACE_OPEN
template<> ::ChatRoom::Job::Proto* Arena::CreateMaybeMessage<::ChatRoom::Job::Proto>(Arena*);
template<> ::ChatRoom::Job::PushMsg* Arena::CreateMaybeMessage<::ChatRoom::Job::PushMsg>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace ChatRoom {
namespace Job {

enum PushMsg_Type : int {
  PushMsg_Type_PUSH = 0,
  PushMsg_Type_ROOM = 1,
  PushMsg_Type_BROADCAST = 2,
  PushMsg_Type_PushMsg_Type_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  PushMsg_Type_PushMsg_Type_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool PushMsg_Type_IsValid(int value);
constexpr PushMsg_Type PushMsg_Type_Type_MIN = PushMsg_Type_PUSH;
constexpr PushMsg_Type PushMsg_Type_Type_MAX = PushMsg_Type_BROADCAST;
constexpr int PushMsg_Type_Type_ARRAYSIZE = PushMsg_Type_Type_MAX + 1;

const std::string& PushMsg_Type_Name(PushMsg_Type value);
template<typename T>
inline const std::string& PushMsg_Type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PushMsg_Type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PushMsg_Type_Name.");
  return PushMsg_Type_Name(static_cast<PushMsg_Type>(enum_t_value));
}
bool PushMsg_Type_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, PushMsg_Type* value);
// ===================================================================

class PushMsg final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:ChatRoom.Job.PushMsg) */ {
 public:
  inline PushMsg() : PushMsg(nullptr) {}
  ~PushMsg() override;
  explicit constexpr PushMsg(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PushMsg(const PushMsg& from);
  PushMsg(PushMsg&& from) noexcept
    : PushMsg() {
    *this = ::std::move(from);
  }

  inline PushMsg& operator=(const PushMsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline PushMsg& operator=(PushMsg&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const PushMsg& default_instance() {
    return *internal_default_instance();
  }
  static inline const PushMsg* internal_default_instance() {
    return reinterpret_cast<const PushMsg*>(
               &_PushMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PushMsg& a, PushMsg& b) {
    a.Swap(&b);
  }
  inline void Swap(PushMsg* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PushMsg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PushMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PushMsg>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const PushMsg& from);
  void MergeFrom(const PushMsg& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PushMsg* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ChatRoom.Job.PushMsg";
  }
  protected:
  explicit PushMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef PushMsg_Type Type;
  static constexpr Type PUSH =
    PushMsg_Type_PUSH;
  static constexpr Type ROOM =
    PushMsg_Type_ROOM;
  static constexpr Type BROADCAST =
    PushMsg_Type_BROADCAST;
  static inline bool Type_IsValid(int value) {
    return PushMsg_Type_IsValid(value);
  }
  static constexpr Type Type_MIN =
    PushMsg_Type_Type_MIN;
  static constexpr Type Type_MAX =
    PushMsg_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE =
    PushMsg_Type_Type_ARRAYSIZE;
  template<typename T>
  static inline const std::string& Type_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Type>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Type_Name.");
    return PushMsg_Type_Name(enum_t_value);
  }
  static inline bool Type_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Type* value) {
    return PushMsg_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kKeysFieldNumber = 6,
    kServerFieldNumber = 4,
    kRoomFieldNumber = 5,
    kMsgFieldNumber = 7,
    kTypeFieldNumber = 1,
    kOperationFieldNumber = 2,
    kSpeedFieldNumber = 3,
  };
  // repeated string keys = 6;
  int keys_size() const;
  private:
  int _internal_keys_size() const;
  public:
  void clear_keys();
  const std::string& keys(int index) const;
  std::string* mutable_keys(int index);
  void set_keys(int index, const std::string& value);
  void set_keys(int index, std::string&& value);
  void set_keys(int index, const char* value);
  void set_keys(int index, const char* value, size_t size);
  std::string* add_keys();
  void add_keys(const std::string& value);
  void add_keys(std::string&& value);
  void add_keys(const char* value);
  void add_keys(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& keys() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_keys();
  private:
  const std::string& _internal_keys(int index) const;
  std::string* _internal_add_keys();
  public:

  // string server = 4;
  void clear_server();
  const std::string& server() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_server(ArgT0&& arg0, ArgT... args);
  std::string* mutable_server();
  PROTOBUF_NODISCARD std::string* release_server();
  void set_allocated_server(std::string* server);
  private:
  const std::string& _internal_server() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_server(const std::string& value);
  std::string* _internal_mutable_server();
  public:

  // string room = 5;
  void clear_room();
  const std::string& room() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_room(ArgT0&& arg0, ArgT... args);
  std::string* mutable_room();
  PROTOBUF_NODISCARD std::string* release_room();
  void set_allocated_room(std::string* room);
  private:
  const std::string& _internal_room() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_room(const std::string& value);
  std::string* _internal_mutable_room();
  public:

  // bytes msg = 7;
  void clear_msg();
  const std::string& msg() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_msg(ArgT0&& arg0, ArgT... args);
  std::string* mutable_msg();
  PROTOBUF_NODISCARD std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  private:
  const std::string& _internal_msg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // .ChatRoom.Job.PushMsg.Type type = 1;
  void clear_type();
  ::ChatRoom::Job::PushMsg_Type type() const;
  void set_type(::ChatRoom::Job::PushMsg_Type value);
  private:
  ::ChatRoom::Job::PushMsg_Type _internal_type() const;
  void _internal_set_type(::ChatRoom::Job::PushMsg_Type value);
  public:

  // int32 operation = 2;
  void clear_operation();
  int32_t operation() const;
  void set_operation(int32_t value);
  private:
  int32_t _internal_operation() const;
  void _internal_set_operation(int32_t value);
  public:

  // int32 speed = 3;
  void clear_speed();
  int32_t speed() const;
  void set_speed(int32_t value);
  private:
  int32_t _internal_speed() const;
  void _internal_set_speed(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ChatRoom.Job.PushMsg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> keys_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr server_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr room_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  int type_;
  int32_t operation_;
  int32_t speed_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ChatRoom_2eJob_2eproto;
};
// -------------------------------------------------------------------

class Proto final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:ChatRoom.Job.Proto) */ {
 public:
  inline Proto() : Proto(nullptr) {}
  ~Proto() override;
  explicit constexpr Proto(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Proto(const Proto& from);
  Proto(Proto&& from) noexcept
    : Proto() {
    *this = ::std::move(from);
  }

  inline Proto& operator=(const Proto& from) {
    CopyFrom(from);
    return *this;
  }
  inline Proto& operator=(Proto&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const Proto& default_instance() {
    return *internal_default_instance();
  }
  static inline const Proto* internal_default_instance() {
    return reinterpret_cast<const Proto*>(
               &_Proto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Proto& a, Proto& b) {
    a.Swap(&b);
  }
  inline void Swap(Proto* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Proto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Proto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Proto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const Proto& from);
  void MergeFrom(const Proto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Proto* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ChatRoom.Job.Proto";
  }
  protected:
  explicit Proto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBodyFieldNumber = 4,
    kVerFieldNumber = 1,
    kOpFieldNumber = 2,
    kSeqFieldNumber = 3,
  };
  // bytes body = 4;
  void clear_body();
  const std::string& body() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_body(ArgT0&& arg0, ArgT... args);
  std::string* mutable_body();
  PROTOBUF_NODISCARD std::string* release_body();
  void set_allocated_body(std::string* body);
  private:
  const std::string& _internal_body() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_body(const std::string& value);
  std::string* _internal_mutable_body();
  public:

  // int32 ver = 1;
  void clear_ver();
  int32_t ver() const;
  void set_ver(int32_t value);
  private:
  int32_t _internal_ver() const;
  void _internal_set_ver(int32_t value);
  public:

  // int32 op = 2;
  void clear_op();
  int32_t op() const;
  void set_op(int32_t value);
  private:
  int32_t _internal_op() const;
  void _internal_set_op(int32_t value);
  public:

  // int32 seq = 3;
  void clear_seq();
  int32_t seq() const;
  void set_seq(int32_t value);
  private:
  int32_t _internal_seq() const;
  void _internal_set_seq(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ChatRoom.Job.Proto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr body_;
  int32_t ver_;
  int32_t op_;
  int32_t seq_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ChatRoom_2eJob_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PushMsg

// .ChatRoom.Job.PushMsg.Type type = 1;
inline void PushMsg::clear_type() {
  type_ = 0;
}
inline ::ChatRoom::Job::PushMsg_Type PushMsg::_internal_type() const {
  return static_cast< ::ChatRoom::Job::PushMsg_Type >(type_);
}
inline ::ChatRoom::Job::PushMsg_Type PushMsg::type() const {
  // @@protoc_insertion_point(field_get:ChatRoom.Job.PushMsg.type)
  return _internal_type();
}
inline void PushMsg::_internal_set_type(::ChatRoom::Job::PushMsg_Type value) {
  
  type_ = value;
}
inline void PushMsg::set_type(::ChatRoom::Job::PushMsg_Type value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:ChatRoom.Job.PushMsg.type)
}

// int32 operation = 2;
inline void PushMsg::clear_operation() {
  operation_ = 0;
}
inline int32_t PushMsg::_internal_operation() const {
  return operation_;
}
inline int32_t PushMsg::operation() const {
  // @@protoc_insertion_point(field_get:ChatRoom.Job.PushMsg.operation)
  return _internal_operation();
}
inline void PushMsg::_internal_set_operation(int32_t value) {
  
  operation_ = value;
}
inline void PushMsg::set_operation(int32_t value) {
  _internal_set_operation(value);
  // @@protoc_insertion_point(field_set:ChatRoom.Job.PushMsg.operation)
}

// int32 speed = 3;
inline void PushMsg::clear_speed() {
  speed_ = 0;
}
inline int32_t PushMsg::_internal_speed() const {
  return speed_;
}
inline int32_t PushMsg::speed() const {
  // @@protoc_insertion_point(field_get:ChatRoom.Job.PushMsg.speed)
  return _internal_speed();
}
inline void PushMsg::_internal_set_speed(int32_t value) {
  
  speed_ = value;
}
inline void PushMsg::set_speed(int32_t value) {
  _internal_set_speed(value);
  // @@protoc_insertion_point(field_set:ChatRoom.Job.PushMsg.speed)
}

// string server = 4;
inline void PushMsg::clear_server() {
  server_.ClearToEmpty();
}
inline const std::string& PushMsg::server() const {
  // @@protoc_insertion_point(field_get:ChatRoom.Job.PushMsg.server)
  return _internal_server();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PushMsg::set_server(ArgT0&& arg0, ArgT... args) {
 
 server_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ChatRoom.Job.PushMsg.server)
}
inline std::string* PushMsg::mutable_server() {
  std::string* _s = _internal_mutable_server();
  // @@protoc_insertion_point(field_mutable:ChatRoom.Job.PushMsg.server)
  return _s;
}
inline const std::string& PushMsg::_internal_server() const {
  return server_.Get();
}
inline void PushMsg::_internal_set_server(const std::string& value) {
  
  server_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PushMsg::_internal_mutable_server() {
  
  return server_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PushMsg::release_server() {
  // @@protoc_insertion_point(field_release:ChatRoom.Job.PushMsg.server)
  return server_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PushMsg::set_allocated_server(std::string* server) {
  if (server != nullptr) {
    
  } else {
    
  }
  server_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), server,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (server_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    server_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ChatRoom.Job.PushMsg.server)
}

// string room = 5;
inline void PushMsg::clear_room() {
  room_.ClearToEmpty();
}
inline const std::string& PushMsg::room() const {
  // @@protoc_insertion_point(field_get:ChatRoom.Job.PushMsg.room)
  return _internal_room();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PushMsg::set_room(ArgT0&& arg0, ArgT... args) {
 
 room_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ChatRoom.Job.PushMsg.room)
}
inline std::string* PushMsg::mutable_room() {
  std::string* _s = _internal_mutable_room();
  // @@protoc_insertion_point(field_mutable:ChatRoom.Job.PushMsg.room)
  return _s;
}
inline const std::string& PushMsg::_internal_room() const {
  return room_.Get();
}
inline void PushMsg::_internal_set_room(const std::string& value) {
  
  room_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PushMsg::_internal_mutable_room() {
  
  return room_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PushMsg::release_room() {
  // @@protoc_insertion_point(field_release:ChatRoom.Job.PushMsg.room)
  return room_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PushMsg::set_allocated_room(std::string* room) {
  if (room != nullptr) {
    
  } else {
    
  }
  room_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), room,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (room_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    room_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ChatRoom.Job.PushMsg.room)
}

// repeated string keys = 6;
inline int PushMsg::_internal_keys_size() const {
  return keys_.size();
}
inline int PushMsg::keys_size() const {
  return _internal_keys_size();
}
inline void PushMsg::clear_keys() {
  keys_.Clear();
}
inline std::string* PushMsg::add_keys() {
  std::string* _s = _internal_add_keys();
  // @@protoc_insertion_point(field_add_mutable:ChatRoom.Job.PushMsg.keys)
  return _s;
}
inline const std::string& PushMsg::_internal_keys(int index) const {
  return keys_.Get(index);
}
inline const std::string& PushMsg::keys(int index) const {
  // @@protoc_insertion_point(field_get:ChatRoom.Job.PushMsg.keys)
  return _internal_keys(index);
}
inline std::string* PushMsg::mutable_keys(int index) {
  // @@protoc_insertion_point(field_mutable:ChatRoom.Job.PushMsg.keys)
  return keys_.Mutable(index);
}
inline void PushMsg::set_keys(int index, const std::string& value) {
  keys_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:ChatRoom.Job.PushMsg.keys)
}
inline void PushMsg::set_keys(int index, std::string&& value) {
  keys_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:ChatRoom.Job.PushMsg.keys)
}
inline void PushMsg::set_keys(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  keys_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ChatRoom.Job.PushMsg.keys)
}
inline void PushMsg::set_keys(int index, const char* value, size_t size) {
  keys_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ChatRoom.Job.PushMsg.keys)
}
inline std::string* PushMsg::_internal_add_keys() {
  return keys_.Add();
}
inline void PushMsg::add_keys(const std::string& value) {
  keys_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ChatRoom.Job.PushMsg.keys)
}
inline void PushMsg::add_keys(std::string&& value) {
  keys_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ChatRoom.Job.PushMsg.keys)
}
inline void PushMsg::add_keys(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  keys_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ChatRoom.Job.PushMsg.keys)
}
inline void PushMsg::add_keys(const char* value, size_t size) {
  keys_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ChatRoom.Job.PushMsg.keys)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
PushMsg::keys() const {
  // @@protoc_insertion_point(field_list:ChatRoom.Job.PushMsg.keys)
  return keys_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
PushMsg::mutable_keys() {
  // @@protoc_insertion_point(field_mutable_list:ChatRoom.Job.PushMsg.keys)
  return &keys_;
}

// bytes msg = 7;
inline void PushMsg::clear_msg() {
  msg_.ClearToEmpty();
}
inline const std::string& PushMsg::msg() const {
  // @@protoc_insertion_point(field_get:ChatRoom.Job.PushMsg.msg)
  return _internal_msg();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PushMsg::set_msg(ArgT0&& arg0, ArgT... args) {
 
 msg_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ChatRoom.Job.PushMsg.msg)
}
inline std::string* PushMsg::mutable_msg() {
  std::string* _s = _internal_mutable_msg();
  // @@protoc_insertion_point(field_mutable:ChatRoom.Job.PushMsg.msg)
  return _s;
}
inline const std::string& PushMsg::_internal_msg() const {
  return msg_.Get();
}
inline void PushMsg::_internal_set_msg(const std::string& value) {
  
  msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PushMsg::_internal_mutable_msg() {
  
  return msg_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PushMsg::release_msg() {
  // @@protoc_insertion_point(field_release:ChatRoom.Job.PushMsg.msg)
  return msg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PushMsg::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (msg_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ChatRoom.Job.PushMsg.msg)
}

// -------------------------------------------------------------------

// Proto

// int32 ver = 1;
inline void Proto::clear_ver() {
  ver_ = 0;
}
inline int32_t Proto::_internal_ver() const {
  return ver_;
}
inline int32_t Proto::ver() const {
  // @@protoc_insertion_point(field_get:ChatRoom.Job.Proto.ver)
  return _internal_ver();
}
inline void Proto::_internal_set_ver(int32_t value) {
  
  ver_ = value;
}
inline void Proto::set_ver(int32_t value) {
  _internal_set_ver(value);
  // @@protoc_insertion_point(field_set:ChatRoom.Job.Proto.ver)
}

// int32 op = 2;
inline void Proto::clear_op() {
  op_ = 0;
}
inline int32_t Proto::_internal_op() const {
  return op_;
}
inline int32_t Proto::op() const {
  // @@protoc_insertion_point(field_get:ChatRoom.Job.Proto.op)
  return _internal_op();
}
inline void Proto::_internal_set_op(int32_t value) {
  
  op_ = value;
}
inline void Proto::set_op(int32_t value) {
  _internal_set_op(value);
  // @@protoc_insertion_point(field_set:ChatRoom.Job.Proto.op)
}

// int32 seq = 3;
inline void Proto::clear_seq() {
  seq_ = 0;
}
inline int32_t Proto::_internal_seq() const {
  return seq_;
}
inline int32_t Proto::seq() const {
  // @@protoc_insertion_point(field_get:ChatRoom.Job.Proto.seq)
  return _internal_seq();
}
inline void Proto::_internal_set_seq(int32_t value) {
  
  seq_ = value;
}
inline void Proto::set_seq(int32_t value) {
  _internal_set_seq(value);
  // @@protoc_insertion_point(field_set:ChatRoom.Job.Proto.seq)
}

// bytes body = 4;
inline void Proto::clear_body() {
  body_.ClearToEmpty();
}
inline const std::string& Proto::body() const {
  // @@protoc_insertion_point(field_get:ChatRoom.Job.Proto.body)
  return _internal_body();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Proto::set_body(ArgT0&& arg0, ArgT... args) {
 
 body_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ChatRoom.Job.Proto.body)
}
inline std::string* Proto::mutable_body() {
  std::string* _s = _internal_mutable_body();
  // @@protoc_insertion_point(field_mutable:ChatRoom.Job.Proto.body)
  return _s;
}
inline const std::string& Proto::_internal_body() const {
  return body_.Get();
}
inline void Proto::_internal_set_body(const std::string& value) {
  
  body_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Proto::_internal_mutable_body() {
  
  return body_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Proto::release_body() {
  // @@protoc_insertion_point(field_release:ChatRoom.Job.Proto.body)
  return body_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Proto::set_allocated_body(std::string* body) {
  if (body != nullptr) {
    
  } else {
    
  }
  body_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), body,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (body_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    body_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ChatRoom.Job.Proto.body)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Job
}  // namespace ChatRoom

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::ChatRoom::Job::PushMsg_Type> : ::std::true_type {};

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ChatRoom_2eJob_2eproto
