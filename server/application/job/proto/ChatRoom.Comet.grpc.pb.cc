// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: ChatRoom.Comet.proto

#include "ChatRoom.Comet.pb.h"
#include "ChatRoom.Comet.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace ChatRoom {
namespace Comet {

static const char* Comet_method_names[] = {
  "/ChatRoom.Comet.Comet/PushMsg",
  "/ChatRoom.Comet.Comet/Broadcast",
  "/ChatRoom.Comet.Comet/BroadcastRoom",
  "/ChatRoom.Comet.Comet/Rooms",
};

std::unique_ptr< Comet::Stub> Comet::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Comet::Stub> stub(new Comet::Stub(channel, options));
  return stub;
}

Comet::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_PushMsg_(Comet_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Broadcast_(Comet_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_BroadcastRoom_(Comet_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Rooms_(Comet_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Comet::Stub::PushMsg(::grpc::ClientContext* context, const ::ChatRoom::Comet::PushMsgReq& request, ::ChatRoom::Comet::PushMsgReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::ChatRoom::Comet::PushMsgReq, ::ChatRoom::Comet::PushMsgReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_PushMsg_, context, request, response);
}

void Comet::Stub::async::PushMsg(::grpc::ClientContext* context, const ::ChatRoom::Comet::PushMsgReq* request, ::ChatRoom::Comet::PushMsgReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::ChatRoom::Comet::PushMsgReq, ::ChatRoom::Comet::PushMsgReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PushMsg_, context, request, response, std::move(f));
}

void Comet::Stub::async::PushMsg(::grpc::ClientContext* context, const ::ChatRoom::Comet::PushMsgReq* request, ::ChatRoom::Comet::PushMsgReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PushMsg_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ChatRoom::Comet::PushMsgReply>* Comet::Stub::PrepareAsyncPushMsgRaw(::grpc::ClientContext* context, const ::ChatRoom::Comet::PushMsgReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::ChatRoom::Comet::PushMsgReply, ::ChatRoom::Comet::PushMsgReq, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_PushMsg_, context, request);
}

::grpc::ClientAsyncResponseReader< ::ChatRoom::Comet::PushMsgReply>* Comet::Stub::AsyncPushMsgRaw(::grpc::ClientContext* context, const ::ChatRoom::Comet::PushMsgReq& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncPushMsgRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Comet::Stub::Broadcast(::grpc::ClientContext* context, const ::ChatRoom::Comet::BroadcastReq& request, ::ChatRoom::Comet::BroadcastReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::ChatRoom::Comet::BroadcastReq, ::ChatRoom::Comet::BroadcastReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Broadcast_, context, request, response);
}

void Comet::Stub::async::Broadcast(::grpc::ClientContext* context, const ::ChatRoom::Comet::BroadcastReq* request, ::ChatRoom::Comet::BroadcastReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::ChatRoom::Comet::BroadcastReq, ::ChatRoom::Comet::BroadcastReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Broadcast_, context, request, response, std::move(f));
}

void Comet::Stub::async::Broadcast(::grpc::ClientContext* context, const ::ChatRoom::Comet::BroadcastReq* request, ::ChatRoom::Comet::BroadcastReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Broadcast_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ChatRoom::Comet::BroadcastReply>* Comet::Stub::PrepareAsyncBroadcastRaw(::grpc::ClientContext* context, const ::ChatRoom::Comet::BroadcastReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::ChatRoom::Comet::BroadcastReply, ::ChatRoom::Comet::BroadcastReq, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Broadcast_, context, request);
}

::grpc::ClientAsyncResponseReader< ::ChatRoom::Comet::BroadcastReply>* Comet::Stub::AsyncBroadcastRaw(::grpc::ClientContext* context, const ::ChatRoom::Comet::BroadcastReq& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncBroadcastRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Comet::Stub::BroadcastRoom(::grpc::ClientContext* context, const ::ChatRoom::Comet::BroadcastRoomReq& request, ::ChatRoom::Comet::BroadcastRoomReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::ChatRoom::Comet::BroadcastRoomReq, ::ChatRoom::Comet::BroadcastRoomReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_BroadcastRoom_, context, request, response);
}

void Comet::Stub::async::BroadcastRoom(::grpc::ClientContext* context, const ::ChatRoom::Comet::BroadcastRoomReq* request, ::ChatRoom::Comet::BroadcastRoomReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::ChatRoom::Comet::BroadcastRoomReq, ::ChatRoom::Comet::BroadcastRoomReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_BroadcastRoom_, context, request, response, std::move(f));
}

void Comet::Stub::async::BroadcastRoom(::grpc::ClientContext* context, const ::ChatRoom::Comet::BroadcastRoomReq* request, ::ChatRoom::Comet::BroadcastRoomReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_BroadcastRoom_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ChatRoom::Comet::BroadcastRoomReply>* Comet::Stub::PrepareAsyncBroadcastRoomRaw(::grpc::ClientContext* context, const ::ChatRoom::Comet::BroadcastRoomReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::ChatRoom::Comet::BroadcastRoomReply, ::ChatRoom::Comet::BroadcastRoomReq, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_BroadcastRoom_, context, request);
}

::grpc::ClientAsyncResponseReader< ::ChatRoom::Comet::BroadcastRoomReply>* Comet::Stub::AsyncBroadcastRoomRaw(::grpc::ClientContext* context, const ::ChatRoom::Comet::BroadcastRoomReq& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncBroadcastRoomRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Comet::Stub::Rooms(::grpc::ClientContext* context, const ::ChatRoom::Comet::RoomsReq& request, ::ChatRoom::Comet::RoomsReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::ChatRoom::Comet::RoomsReq, ::ChatRoom::Comet::RoomsReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Rooms_, context, request, response);
}

void Comet::Stub::async::Rooms(::grpc::ClientContext* context, const ::ChatRoom::Comet::RoomsReq* request, ::ChatRoom::Comet::RoomsReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::ChatRoom::Comet::RoomsReq, ::ChatRoom::Comet::RoomsReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Rooms_, context, request, response, std::move(f));
}

void Comet::Stub::async::Rooms(::grpc::ClientContext* context, const ::ChatRoom::Comet::RoomsReq* request, ::ChatRoom::Comet::RoomsReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Rooms_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ChatRoom::Comet::RoomsReply>* Comet::Stub::PrepareAsyncRoomsRaw(::grpc::ClientContext* context, const ::ChatRoom::Comet::RoomsReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::ChatRoom::Comet::RoomsReply, ::ChatRoom::Comet::RoomsReq, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Rooms_, context, request);
}

::grpc::ClientAsyncResponseReader< ::ChatRoom::Comet::RoomsReply>* Comet::Stub::AsyncRoomsRaw(::grpc::ClientContext* context, const ::ChatRoom::Comet::RoomsReq& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRoomsRaw(context, request, cq);
  result->StartCall();
  return result;
}

Comet::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Comet_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Comet::Service, ::ChatRoom::Comet::PushMsgReq, ::ChatRoom::Comet::PushMsgReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Comet::Service* service,
             ::grpc::ServerContext* ctx,
             const ::ChatRoom::Comet::PushMsgReq* req,
             ::ChatRoom::Comet::PushMsgReply* resp) {
               return service->PushMsg(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Comet_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Comet::Service, ::ChatRoom::Comet::BroadcastReq, ::ChatRoom::Comet::BroadcastReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Comet::Service* service,
             ::grpc::ServerContext* ctx,
             const ::ChatRoom::Comet::BroadcastReq* req,
             ::ChatRoom::Comet::BroadcastReply* resp) {
               return service->Broadcast(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Comet_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Comet::Service, ::ChatRoom::Comet::BroadcastRoomReq, ::ChatRoom::Comet::BroadcastRoomReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Comet::Service* service,
             ::grpc::ServerContext* ctx,
             const ::ChatRoom::Comet::BroadcastRoomReq* req,
             ::ChatRoom::Comet::BroadcastRoomReply* resp) {
               return service->BroadcastRoom(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Comet_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Comet::Service, ::ChatRoom::Comet::RoomsReq, ::ChatRoom::Comet::RoomsReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Comet::Service* service,
             ::grpc::ServerContext* ctx,
             const ::ChatRoom::Comet::RoomsReq* req,
             ::ChatRoom::Comet::RoomsReply* resp) {
               return service->Rooms(ctx, req, resp);
             }, this)));
}

Comet::Service::~Service() {
}

::grpc::Status Comet::Service::PushMsg(::grpc::ServerContext* context, const ::ChatRoom::Comet::PushMsgReq* request, ::ChatRoom::Comet::PushMsgReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Comet::Service::Broadcast(::grpc::ServerContext* context, const ::ChatRoom::Comet::BroadcastReq* request, ::ChatRoom::Comet::BroadcastReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Comet::Service::BroadcastRoom(::grpc::ServerContext* context, const ::ChatRoom::Comet::BroadcastRoomReq* request, ::ChatRoom::Comet::BroadcastRoomReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Comet::Service::Rooms(::grpc::ServerContext* context, const ::ChatRoom::Comet::RoomsReq* request, ::ChatRoom::Comet::RoomsReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace ChatRoom
}  // namespace Comet

